From a8fe86fb19e224d1e709b2f78a6a1e28dc9f3a3a Mon Sep 17 00:00:00 2001
From: Maciej Sobkowski <maciej@sobkow.ski>
Date: Wed, 16 Aug 2017 16:49:43 +0200
Subject: [PATCH 1/3] Add pru-dma driver to Linux tree

To use pru-dma from pru_rproc module, it needs to be present in tree
during compilation. It is also modified to support DMA channels
configuration from firmware resource table.

Signed-off-by: Maciej Sobkowski <maciej@sobkow.ski>
---
 drivers/remoteproc/Makefile  |   2 +-
 drivers/remoteproc/pru_dma.c | 306 +++++++++++++++++++++++++++++++++++++++++++
 include/linux/pru_dma.h      |  20 +++
 3 files changed, 327 insertions(+), 1 deletion(-)
 create mode 100644 drivers/remoteproc/pru_dma.c
 create mode 100644 include/linux/pru_dma.h

diff --git a/drivers/remoteproc/Makefile b/drivers/remoteproc/Makefile
index 8488f70ed605..bfa227dcbc5c 100644
--- a/drivers/remoteproc/Makefile
+++ b/drivers/remoteproc/Makefile
@@ -11,7 +11,7 @@ remoteproc-y				+= remoteproc_elf_loader.o
 obj-$(CONFIG_OMAP_REMOTEPROC)		+= omap_remoteproc.o
 obj-$(CONFIG_WKUP_M3_RPROC)		+= wkup_m3_rproc.o
 obj-$(CONFIG_DA8XX_REMOTEPROC)		+= da8xx_remoteproc.o
-obj-$(CONFIG_PRUSS_REMOTEPROC)		+= pruss_soc_bus.o pruss.o pruss_intc.o pru_rproc.o
+obj-$(CONFIG_PRUSS_REMOTEPROC)		+= pruss_soc_bus.o pruss.o pruss_intc.o pru_rproc.o pru_dma.o
 obj-$(CONFIG_KEYSTONE_REMOTEPROC)	+= keystone_remoteproc.o
 obj-$(CONFIG_QCOM_ADSP_PIL)		+= qcom_adsp_pil.o
 obj-$(CONFIG_QCOM_MDT_LOADER)		+= qcom_mdt_loader.o
diff --git a/drivers/remoteproc/pru_dma.c b/drivers/remoteproc/pru_dma.c
new file mode 100644
index 000000000000..1ac3b935e2a3
--- /dev/null
+++ b/drivers/remoteproc/pru_dma.c
@@ -0,0 +1,306 @@
+/*
+ * PRU DMA - driver for communicating with PRU firmware using pru-dma library
+ *
+ * Copyright (C) 2017 Maciej Sobkowski <maciej@sobkow.ski>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/pruss.h>
+#include <linux/rpmsg.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/dma-mapping.h>
+#include <linux/of.h>
+#include <linux/completion.h>
+#include <linux/pru_dma.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/irqreturn.h>
+
+#define DRV_NAME "pru_dma"
+
+#define PRU_DMA_MAX_CHANS 10
+
+struct pru_dma_buf {
+	uint32_t *kbuf;
+	dma_addr_t kbuf_dma;
+	uint32_t kbuf_size;
+	uint32_t notify;
+	struct completion tx_complete;
+	uint8_t configured;
+
+};
+
+struct pru_dma {
+	struct list_head node;
+	struct device *dev;
+	//struct rpmsg_device *rpdev;
+	struct pru_dma_buf buffers[PRU_DMA_MAX_CHANS];
+	char *chan_name;
+	int irq_from_pru;
+	int irq_to_pru;
+	struct pruss *pruss;
+	struct pruss_mem_region pru1_memory;
+};
+
+struct edma_tx_desc {
+	uint32_t kbuf_addr;
+	uint32_t kbuf_size;
+	uint8_t  edma_slot;
+	uint8_t  edma_chan;
+	uint8_t  flags;
+};
+
+#define TX_DESC_FLAGS_NOTIFY_COMPLETION (1 << 0)
+
+#define PRU_DMA_TX_COMPLETED (uint8_t) (0x01)
+
+static DEFINE_MUTEX(pru_dma_list_mutex);
+static LIST_HEAD(pru_dma_list);
+
+uint32_t *pru_dma_get_buffer(struct pru_dma *pru_dma, int buf_num)
+{
+	return pru_dma->buffers[buf_num].configured ?  pru_dma->buffers[buf_num].kbuf : ERR_PTR(-EPROBE_DEFER);
+}
+EXPORT_SYMBOL_GPL(pru_dma_get_buffer);
+
+uint32_t pru_dma_get_buffer_size(struct pru_dma *pru_dma, int buf_num)
+{
+	return pru_dma->buffers[buf_num].kbuf_size;
+}
+EXPORT_SYMBOL_GPL(pru_dma_get_buffer_size);
+
+int pru_dma_map_buffer(struct pru_dma *pru_dma, int buf_num)
+{
+	int ret;
+
+	pru_dma->buffers[buf_num].kbuf_dma =
+		dma_map_single(pru_dma->dev, pru_dma->buffers[buf_num].kbuf,
+		pru_dma->buffers[buf_num].kbuf_size, DMA_BIDIRECTIONAL);
+	ret = dma_mapping_error(pru_dma->dev, pru_dma->buffers[buf_num].kbuf_dma);
+	if (ret) {
+		dev_err(pru_dma->dev, "Buffer DMA mapping failed");
+		return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pru_dma_map_buffer);
+
+void pru_dma_unmap_buffer(struct pru_dma *pru_dma, int buf_num)
+{
+	dma_unmap_single(pru_dma->dev, pru_dma->buffers[buf_num].kbuf_dma,
+			pru_dma->buffers[buf_num].kbuf_size, DMA_BIDIRECTIONAL);
+}
+EXPORT_SYMBOL_GPL(pru_dma_unmap_buffer);
+
+int pru_dma_buffer_setup(struct pru_dma *pru_dma, uint32_t *buf_addr, uint32_t buf_size, uint8_t notify_completion, int buf_num)
+{
+	int ret;
+	pru_dma->buffers[buf_num].kbuf = devm_kzalloc(pru_dma->dev,
+				buf_size * sizeof(uint32_t),
+				GFP_KERNEL);
+	if (!pru_dma->buffers[buf_num].kbuf)
+		return -ENOMEM;
+
+	pru_dma->buffers[buf_num].kbuf_dma = dma_map_single(pru_dma->dev, pru_dma->buffers[buf_num].kbuf,
+			buf_size, DMA_BIDIRECTIONAL);
+	ret = dma_mapping_error(pru_dma->dev, pru_dma->buffers[buf_num].kbuf_dma);
+	if (ret) {
+		dev_err(pru_dma->dev, "Buffer DMA mapping failed");
+		return ret;
+	}
+
+	*buf_addr = pru_dma->buffers[buf_num].kbuf_dma;
+
+	pru_dma->buffers[buf_num].notify = notify_completion;
+	pru_dma->buffers[buf_num].kbuf_size = buf_size;
+	pru_dma->buffers[buf_num].configured = 1;
+
+	if (pru_dma->buffers[buf_num].notify)
+		init_completion(&pru_dma->buffers[buf_num].tx_complete);
+
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pru_dma_buffer_setup);
+
+
+int pru_dma_tx_trigger(struct pru_dma *pru_dma, int buf_num)
+{
+	pruss_intc_trigger(pru_dma->irq_to_pru);
+
+	if (pru_dma->buffers[buf_num].notify)
+		reinit_completion(&pru_dma->buffers[buf_num].tx_complete);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pru_dma_tx_trigger);
+
+int pru_dma_tx_completion_wait(struct pru_dma *pru_dma, int buf_num)
+{
+	if (pru_dma->buffers[buf_num].notify) {
+		wait_for_completion(&pru_dma->buffers[buf_num].tx_complete);
+		return 0;
+	} else {
+		pr_err("TX completion notification disabled\n");
+		return -1;
+	}
+}
+EXPORT_SYMBOL_GPL(pru_dma_tx_completion_wait);
+
+struct pru_dma *pru_dma_get(char *chan_name)
+{
+	struct pru_dma *pru_dma = NULL, *p;
+
+	mutex_lock(&pru_dma_list_mutex);
+	list_for_each_entry(p, &pru_dma_list, node) {
+		pru_dma = p;
+		get_device(pru_dma->dev);
+		break;
+		if (strcmp(chan_name, p->chan_name) == 0) {
+			pru_dma = p;
+			get_device(pru_dma->dev);
+			break;
+		}
+	}
+
+	mutex_unlock(&pru_dma_list_mutex);
+
+	return pru_dma ? pru_dma : ERR_PTR(-EPROBE_DEFER);
+}
+EXPORT_SYMBOL_GPL(pru_dma_get);
+
+void pru_dma_put(struct pru_dma *pru_dma)
+{
+	if (!pru_dma)
+		return;
+
+	put_device(pru_dma->dev);
+}
+EXPORT_SYMBOL_GPL(pru_dma_put);
+
+int i = 0;
+
+irqreturn_t pru_dma_irq_handler(int irq, void *data)
+{
+	struct pru_dma *pru_dma = data;
+	int i = 0;
+
+	uint32_t *ptr = (uint32_t *) pru_dma->pru1_memory.va;
+	dev_dbg(pru_dma->dev, "Interrupt from PRU received, reading mem: 0: 0x%.8x 1: 0x%.8x\n",
+			ptr[0], ptr[1]);
+
+	for (i = 0; i < PRU_DMA_MAX_CHANS; i++) {
+		if (((1 << i) & ptr[0]) && pru_dma->buffers[i].notify) {
+			dev_dbg(pru_dma->dev, "Issue completion for channel %d\n", i);
+			complete(&pru_dma->buffers[i].tx_complete);
+		}
+	}
+
+	return IRQ_HANDLED;
+}
+
+
+static int pru_dma_probe(struct platform_device *pdev)
+{
+	struct pru_dma *pru_dma;
+	int ret;
+
+	pru_dma = devm_kzalloc(&pdev->dev, sizeof(*pru_dma), GFP_KERNEL);
+	if (!pru_dma)
+		return -ENOMEM;
+
+	pru_dma->dev = &pdev->dev;
+
+	dev_set_drvdata(&pdev->dev, pru_dma);
+
+	/* Grab PRU handle */
+
+	pru_dma->pruss = pruss_get(pru_dma->dev, NULL);
+	if (IS_ERR(pru_dma->pruss)) {
+		ret = PTR_ERR(pru_dma->pruss);
+		dev_err(pru_dma->dev, "Cannot get PRUSS handle");
+		goto err_pruss_get;
+	}
+
+	/* Map pru1 memory */
+	ret = pruss_request_mem_region(pru_dma->pruss, PRUSS_MEM_DRAM1,
+		&pru_dma->pru1_memory);
+	if (ret) {
+		dev_err(pru_dma->dev, "Unable to get PRUSS RAM.\n");
+		goto err_pruss_mem;
+	}
+
+ pruss_rproc_get(pru_dma->pruss, PRUSS_PRU0);
+ pruss_rproc_get(pru_dma->pruss, PRUSS_PRU1);
+
+	pru_dma->irq_from_pru = platform_get_irq_byname(pdev, "irq_from_pru");
+	if (pru_dma->irq_from_pru < 0)
+		return pru_dma->irq_from_pru;
+
+	pru_dma->irq_to_pru = platform_get_irq_byname(pdev, "irq_to_pru");
+	if (pru_dma->irq_to_pru < 0)
+		return pru_dma->irq_to_pru;
+
+	ret = devm_request_irq(&pdev->dev, pru_dma->irq_from_pru, pru_dma_irq_handler,
+			IRQF_ONESHOT, dev_name(&pdev->dev), pru_dma);
+
+	dev_dbg(pru_dma->dev, "Probe success");
+
+	mutex_lock(&pru_dma_list_mutex);
+	list_add_tail(&pru_dma->node, &pru_dma_list);
+	mutex_unlock(&pru_dma_list_mutex);
+
+	return 0;
+
+err_pruss_mem:
+	if (pru_dma->pru1_memory.va)
+		pruss_release_mem_region(pru_dma->pruss, &pru_dma->pru1_memory);
+err_pruss_get:
+	return ret;
+
+}
+
+int pru_dma_remove(struct platform_device *pdev)
+{
+	struct pru_dma *pru_dma = dev_get_drvdata(&pdev->dev);
+
+	mutex_lock(&pru_dma_list_mutex);
+	list_del(&pru_dma->node);
+	mutex_unlock(&pru_dma_list_mutex);
+
+	if (pru_dma->pru1_memory.va)
+		pruss_release_mem_region(pru_dma->pruss, &pru_dma->pru1_memory);
+
+	return 0;
+}
+
+static const struct of_device_id pru_dma_ids[] = {
+	{ .compatible = "pru-dma", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, pru_dma_ids);
+
+static struct platform_driver pru_dma_driver = {
+	.driver = {
+		.name = DRV_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table = pru_dma_ids,
+	},
+	.probe = pru_dma_probe,
+	.remove = pru_dma_remove,
+};
+
+module_platform_driver(pru_dma_driver);
+
+
+MODULE_DESCRIPTION("PRU DMA driver");
+MODULE_AUTHOR("Maciej Sobkowski");
+MODULE_LICENSE("GPL v2");
diff --git a/include/linux/pru_dma.h b/include/linux/pru_dma.h
new file mode 100644
index 000000000000..040337b2c346
--- /dev/null
+++ b/include/linux/pru_dma.h
@@ -0,0 +1,20 @@
+#ifndef __LINUX_PRU_DMA_H
+#define __LINUX_PRU_DMA_H
+
+struct pru_dma;
+
+struct pru_dma *pru_dma_get(char *chan_name);
+void pru_dma_put(struct pru_dma *pru_dma);
+
+uint32_t *pru_dma_get_buffer(struct pru_dma *pru_dma, int buf_num);
+uint32_t pru_dma_get_buffer_size(struct pru_dma *pru_dma, int buf_num);
+
+int pru_dma_map_buffer(struct pru_dma *pru_dma, int buf_num);
+void pru_dma_unmap_buffer(struct pru_dma *pru_dma, int buf_num);
+
+int pru_dma_buffer_setup(struct pru_dma *pru_dma, uint32_t *buf_addr, uint32_t buf_size, uint8_t notify_completion, int buf_num);
+
+int pru_dma_tx_trigger(struct pru_dma *pru_dma, int buf_num);
+int pru_dma_tx_completion_wait(struct pru_dma *pru_dma, int buf_num);
+
+#endif /* __LINUX_PRU_DMA_H */
-- 
2.14.1

